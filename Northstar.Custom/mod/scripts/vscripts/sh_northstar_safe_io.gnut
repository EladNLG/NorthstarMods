globalize_all_functions

table< int, void functionref( string ) > pendingCallbacks
table< int, void functionref( table ) > pendingJSONCallbacks
table< int, void functionref() > failedCallbacks


void function NSLoadFile( string file, void functionref( string ) onSuccess, void functionref() onFailure = null )
{
    int handle = NS_InternalLoadFile( file )

    pendingCallbacks[handle] <- onSuccess
    if (onFailure != null)
        failedCallbacks[handle] <- onFailure
}

void function NSLoadJSONFile( string file, void functionref( table ) onSuccess, void functionref() onFailure = null )
{
    int handle = NS_InternalLoadFile( file )

    pendingJSONCallbacks[handle] <- onSuccess
    if (onFailure != null)
        failedCallbacks[handle] <- onFailure
}

void function NSHandleLoadResult( int handle, bool success, string result )
{
    bool hasFailedCallback = handle in failedCallbacks
    bool isJSONRequest = handle in pendingJSONCallbacks
    bool isValid = (isJSONRequest || handle in pendingCallbacks)

    if (!isValid)
        throw "Invalid IO callback handle"

    if (!success)
    {
        if (hasFailedCallback)
            failedCallbacks[handle]()
        else
        {
            if (isJSONRequest)
                pendingJSONCallbacks[handle]({})
            else pendingCallbacks[handle]()
        }

        delete failedCallbacks[handle]

        if (isJSONRequest)
            delete pendingJSONCallbacks[handle]
        else delete pendingCallbacks[handle]
    }
    if (isJSONRequest)
    {
        pendingJSONCallbacks[handle](DecodeJSON(result))
        delete pendingJSONCallbacks[handle]
        return
    }
    else
    {
        pendingCallbacks[handle](result)
        delete pendingCallbacks[handle]
        return
    }
}

array<string> function NSGetAllFiles( string path = "" )
{
    return NS_InternalGetAllFiles(path)
}